# Copyright 1999-2017 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

# Based on postgresql.eselect by Aaron W. Swenson

inherit config multilib

DESCRIPTION="Manage active Electron version."
MAINTAINER="elvis@magic.io"
VERSION="2.1"

# Global Data
USR_PATH="${EROOT%/}/usr"

INCLUDE_TARGETS=(
	"${USR_PATH}"/include/electron
)

active_slot() {
    # ${USR_PATH}/include/electron is a symlink to the active
    # slot.  See if it's there, then find out where it links to.
	if [[ -h "${USR_PATH}/include/electron" ]] ; then
		canonicalise "${USR_PATH}/include/electron" | \
			sed -re 's#.*([1-9][0-9.]+)$#\1#'
	else
		echo "(none)"
	fi
}

lib_dir() {
	local lib_list=$(list_libdirs)
	if [[ ${lib_list} =~ .*lib64.* && \
		-n $(ls -d ${USR_PATH}/lib64/electron-* 2> /dev/null) ]] ; then
		echo "lib64"
	elif [[ ${lib_list} =~ .*lib32.* && \
		-n $(ls -d ${USR_PATH}/lib32/electron-* 2> /dev/null) ]] ; then
		echo "lib32"
	elif [[ ${lib_list} =~ .*libx32.* && \
		-n $(ls -d ${USR_PATH}/libx32/electron-* 2> /dev/null) ]] ; then
		echo "libx32"
	else
		echo "lib"
	fi
}

### Get Slots Function ###
# Find all available slots in the preferred lib_dir() and return them.
get_slots() {
	local slot
	local found_slots

	for slot in $(find "${USR_PATH}/$(lib_dir)/" \
					   -mindepth 1 -maxdepth 1 -type d -name 'electron-*' | \
						 sed -re 's#.*([1-9][0-9.]+)$#\1#' | sort -n)
	do
		# Check that electron binary exists for this slot, otherwise we have
		# a false positive.
		[[ -x "${USR_PATH}/$(lib_dir)/electron-${slot}/electron" ]] && \
			found_slots+=( ${slot} )
	done

	echo ${found_slots[@]}
}

### List Action ###
describe_list() {
	echo "List available Electron slots."
}

do_list() {
	write_list_start "Available Electron Slots"

	if $(is_output_mode brief) ; then
		echo $(get_slots)
	else
		local provider
		local slot
		local bindir
		for slot in $(get_slots) ; do
			bindir="${USR_PATH}/$(lib_dir)/electron-${slot}"

			provider=$("${bindir}"/electron --version | \
					   sed 's/[^0-9]*\(.*\)/\1/')

			case "${slot}" in
				"$(active_slot)" )
					write_kv_list_entry \
						"$(highlight_marker ${slot})" "${provider}";;
				* )
					write_kv_list_entry "${slot}" "${provider}";;
			esac
		done

		[[ -z "$(get_slots)" ]] && write_warning_msg "No slots available."
	fi
}

### Show Action ###
describe_show() {
	echo "Show which slot is currently active."
}

do_show() {
	echo $(active_slot)
}

### Set Action ###
describe_set() {
	echo "Create symbolic links for Electron libraries and applications."
}

do_set() {
	local slot=$1

	if [[ ! -d ${USR_PATH}/$(lib_dir)/electron-${slot} ]] ; then
		die -q "Not a valid Electron slot."
	fi

	# If there's an active slot, unset that one first
	local active_slot=$(active_slot)
	if [[ "${active_slot}" != "(none)" ]] ; then
		echo -ne "Unsetting electron-${active_slot} as the default... "
		do_unset ${active_slot}
		echo "done."
	fi

	echo -ne "Setting electron-${slot} as the default Electron installation... "

	# Sources and targets for header files
	local include_sources=(
		"${USR_PATH}"/include/electron-${slot}
	)

	local rel_source
	local i
	for (( i=0; $i < ${#include_sources[@]}; i++ )) ; do
		[[ -e ${include_sources[$i]} ]] || continue

		# Create relative links so that they work both here and inside a new
		# root if $ROOT is not "/"
		rel_source=$(relative_name "${include_sources[$i]}" "$(dirname "${INCLUDE_TARGETS[$i]}")")

		ln -s "$rel_source" "${INCLUDE_TARGETS[$i]}" || \
			die -q "Unable to create link! $rel_source -> ${INCLUDE_TARGETS[$i]}"
	done

	# Link binary in /usr/bin/
	ln -s "electron-${slot}" "/usr/bin/electron"

	echo "success!"
}

### Unset Action ###
describe_unset() {
	echo "Remove symbolic links."
}

do_unset() {
	local slot=$1
	if [[ ${slot} != $(active_slot) ]] ; then
		echo "Slot already inactive; no work to do."
		return 0
	fi

	# Start with some known locations that are, or will contain, symlinks.
	local paths=(
		"${INCLUDE_TARGETS[@]}"
		"${USR_PATH}/bin"
	)

	local l
	local path

	for path in "${paths[@]}" ; do
		# If path is a link that belongs to the slot in question, it can be
		# removed without invoking find.
		if [[ -h "${path}" && \
					$(canonicalise "${path}") == *electron-${slot}* ]] ; then
			rm "${path}" || write_warning_msg "Couldn't remove: ${path}"
			continue
		fi

		# If path is a real directory, symlinks need to be found within it.
		for l in $(find "${path}" -mindepth 1 -maxdepth 1 -type l) ; do
			# Skip the slot specific links (e.g., electron-1.6) in /usr/bin
			# as they're managed by their ebuilds.
			[[ ${l} == ${USR_PATH}/bin/*${slot} ]] && continue

			# Get the file path that the link is pointing to. If it has the
			# string "electron-${slot}" somewhere in it, then it's a link that
			# needs to be removed.
			if [[ $(canonicalise "${l}") == *electron-${slot}* ]] ; then
				rm "${l}" || write_warning_msg "Couldn't remove: ${l}"
			fi
		done
	done
}

### Update Action ###
describe_update() {
	echo "Refreshes all symbolic links managed by this module"
}

do_update() {
	## ANTIQUITY CLEAN UP ##
	#
	# Older versions of this module generated state and environment files of
	# some sort or another. They're useless now and are just a waste of space.

	local etc_path="${EROOT%/}/etc/eselect/electron"
	if [[ -d ${etc_path} ]] ; then
		local f
		for f in "${etc_path}"/active* ; do
			if [[ -e "${f}" ]] ; then
				rm "${f}" || write_warning_msg "Can't remove: '${f}'"
			fi
		done

		local unused_files
		unused_file=( $(find "${etc_path}" -type f -not -name '.keep*') )
		if [[ -n "${unused_file[@]}" ]] ; then
			write_warning_msg "You have unused files that should be removed:"
			for f in ${unused_file[@]} ; do
				write_warning_msg $f
			done
		else
			echo "It should be safe for you to remove '${etc_path}'"
		fi
	fi
	## End Antiquity Clean Up

	local active_slot=$(active_slot)
	local slots=($(get_slots))

	if [[ ${slots[@]} =~ ${active_slot} ]] ; then
		# If active_slot is in the slots list, set it again as the installation
		# may have changed.
		do_set ${active_slot}
	elif [[ ${#slots[@]} -ne 0 ]] ; then
		# If $slots is not empty and active_slot is not in the list, set the
		# highest slot available.
		do_set ${slots[-1]}
	elif [[ ${active_slot} != "(none)" ]] ; then
		# If slots is empty, but active_slot still has a value, an unset must
		# happen as the links are now pointing to nothing.
		do_unset ${active_slot}
	else
		echo "Apparently, I have nothing to do."
	fi
}
